{"version":3,"file":"static/js/594.254339af.chunk.js","mappings":"+SACMA,EAAU,mCACHC,EAAkB,mCAAG,oGACTC,EAAAA,EAAAA,IACrB,kDACA,CACEC,OAAQ,CACNC,QAASJ,KALiB,cAC1BK,EAD0B,yBASzBA,EAASC,MATgB,2CAAH,qDAYlBC,EAAgB,mCAAG,yGAAOC,EAAP,+BAAe,MAAf,SACPN,EAAAA,EAAAA,IACrB,4CACA,CACEC,OAAQ,CACNC,QAASJ,EACTQ,MAAM,GAAD,OAAKA,MANc,cACxBH,EADwB,yBAUvBA,EAASC,MAVc,2CAAH,qDAYhBG,EAAc,mCAAG,WAAMC,GAAN,uFACLR,EAAAA,EAAAA,IAAA,6CACiBQ,EADjB,oBACoCV,IAF/B,cACtBK,EADsB,yBAIrBA,EAASC,MAJY,2CAAH,sDAOdK,EAAc,mCAAG,WAAMD,GAAN,uFACLR,EAAAA,EAAAA,IAAA,6CACiBQ,EADjB,4BAC4CV,IAFvC,cACtBK,EADsB,yBAIrBA,EAASC,MAJY,2CAAH,sDAOdM,EAAiB,mCAAG,yGAAOF,EAAP,+BAAiB,IAAjB,SACRR,EAAAA,EAAAA,IAAA,6CACiBQ,EADjB,4BAC4CV,EAD5C,YADQ,cACzBK,EADyB,yBAIxBA,EAASC,MAJe,2CAAH,oD,iHCiC9B,UArEkB,WAAO,IAAD,EACdI,GAAYG,EAAAA,EAAAA,IAAU,CAAC,GAAvBH,QACR,GAAwBI,EAAAA,EAAAA,YAAxB,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA0BF,EAAAA,EAAAA,UAAS,MAAnC,eAAOG,EAAP,KAAcC,EAAd,KAEMC,EAAY,WADDC,EAAAA,EAAAA,MACaC,MAAMC,YAAlB,QAA0B,IAkB5C,IAdAC,EAAAA,EAAAA,YAAU,WAAM,wCACd,8GAG2Bd,EAAAA,EAAAA,IAAeC,GAH1C,OAGUc,EAHV,OAIIN,EAAS,MACTF,EAAQQ,GALZ,gDAOIN,EAAS,uDAPb,sGADc,uBAAC,WAAD,wBAYdO,CAAoBC,OAAOhB,GAC5B,GAAE,CAACA,IACCK,EAAL,CAGAY,QAAQC,IAAIX,GAEZ,IAAQY,EAAgEd,EAAhEc,YAAaC,EAAmDf,EAAnDe,eAAgBC,EAAmChB,EAAnCgB,SAAUC,EAAyBjB,EAAzBiB,OAAQC,EAAiBlB,EAAjBkB,aACjDC,EAASL,EAAW,yCACYA,GAClC,4EAEEM,EAA6B,GAAfF,EACdG,EAAaJ,EAAOK,KAAI,SAAAC,GAAK,OAAIA,EAAMC,IAAV,IAAgBC,KAAK,KACxD,OACEzB,IACE,6BAEE,SAAC,KAAD,CAAM0B,GAAItB,EAAV,sBACA,gBAAKuB,IAAKR,EAAQS,IAAI,KAAKC,MAAM,SACjC,wBAAKd,KACL,wCAAgBK,EAAhB,QACA,sCACA,uBAAIJ,KACJ,oCACA,6BAAKK,MAEL,sDACA,2BACE,yBACE,SAAC,KAAD,CAAMK,GAAG,OAAOpB,MAAO,CAAEC,KAAMH,GAA/B,qBAIF,yBACE,SAAC,KAAD,CAAMsB,GAAG,UAAUpB,MAAO,CAAEC,KAAMH,GAAlC,2BAKJ,SAAC,EAAA0B,SAAD,CAAUC,UAAU,gDAApB,UACE,SAAC,KAAD,QArCP,CA0CF,C","sources":["components/services/API.jsx","pages/MovieCard.jsx"],"sourcesContent":["import axios from 'axios';\nconst API_KEY = 'cd08058c291f007122df115265286adb';\nexport const fetchPopularyFilms = async () => {\n  const response = await axios.get(\n    'https://api.themoviedb.org/3/trending/movie/day',\n    {\n      params: {\n        api_key: API_KEY,\n      },\n    }\n  );\n  return response.data;\n};\n\nexport const fetchSearchFilms = async (query = 'cat') => {\n  const response = await axios.get(\n    'https://api.themoviedb.org/3/search/movie',\n    {\n      params: {\n        api_key: API_KEY,\n        query: `${query}`,\n      },\n    }\n  );\n  return response.data;\n};\nexport const fetchFilmsCard = async movieId => {\n  const response = await axios.get(\n    `https://api.themoviedb.org/3/movie/${movieId}?api_key=${API_KEY}`\n  );\n  return response.data;\n};\n\nexport const fetchCastFilms = async movieId => {\n  const response = await axios.get(\n    `https://api.themoviedb.org/3/movie/${movieId}/credits?api_key=${API_KEY}`\n  );\n  return response.data;\n};\n\nexport const fetchReviewsFilms = async (movieId = 255) => {\n  const response = await axios.get(\n    `https://api.themoviedb.org/3/movie/${movieId}/reviews?api_key=${API_KEY}&page=1`\n  );\n  return response.data;\n};\n","import { fetchFilmsCard } from 'components/services/API';\nimport { useState, useEffect, Suspense } from 'react';\nimport { useParams, useLocation, Link, Outlet } from 'react-router-dom';\n\nconst MovieCard = () => {\n  const { movieId } = useParams({});\n  const [film, setFilm] = useState();\n  const [error, setError] = useState(null);\n  const location = useLocation();\n  const backLinkHref = location.state.from ?? '/';\n\n  // console.log('card');\n  // console.log(movieId);\n  useEffect(() => {\n    async function handleFetchFilmCard() {\n      try {\n        // console.log('card11');\n        const filmCard = await fetchFilmsCard(movieId);\n        setError(null);\n        setFilm(filmCard);\n      } catch {\n        setError('Error 😒. Please reload page 👍');\n      } finally {\n      }\n    }\n    handleFetchFilmCard(Number(movieId));\n  }, [movieId]);\n  if (!film) {\n    return;\n  }\n  console.log(error);\n  // console.log(film);\n  const { poster_path, original_title, overview, genres, vote_average } = film;\n  const poster = poster_path\n    ? `https://image.tmdb.org/t/p/w500${poster_path}`\n    : 'https://www.pngall.com/wp-content/uploads/7/Gallery-PNG-Free-Download.png';\n\n  const voteAverage = vote_average * 10;\n  const genresFilm = genres.map(genre => genre.name).join(' ');\n  return (\n    film && (\n      <main>\n        {/* <button>Go back</button> */}\n        <Link to={backLinkHref}>Go Back</Link>\n        <img src={poster} alt=\"11\" width=\"240\"></img>\n        <h1>{original_title}</h1>\n        <p>User Score: {voteAverage}%</p>\n        <h3>Overviev</h3>\n        <p>{overview}</p>\n        <h3>Genres</h3>\n        <p> {genresFilm}</p>\n\n        <h2>Adittional international</h2>\n        <ul>\n          <li>\n            <Link to=\"cast\" state={{ from: backLinkHref }}>\n              Cast\n            </Link>\n          </li>\n          <li>\n            <Link to=\"reviews\" state={{ from: backLinkHref }}>\n              Reviews\n            </Link>\n          </li>\n        </ul>\n        <Suspense fallback={<div>Loading subpage...</div>}>\n          <Outlet />\n        </Suspense>\n      </main>\n    )\n  );\n};\n\nexport default MovieCard;\n"],"names":["API_KEY","fetchPopularyFilms","axios","params","api_key","response","data","fetchSearchFilms","query","fetchFilmsCard","movieId","fetchCastFilms","fetchReviewsFilms","useParams","useState","film","setFilm","error","setError","backLinkHref","useLocation","state","from","useEffect","filmCard","handleFetchFilmCard","Number","console","log","poster_path","original_title","overview","genres","vote_average","poster","voteAverage","genresFilm","map","genre","name","join","to","src","alt","width","Suspense","fallback"],"sourceRoot":""}